{"version":3,"sources":["Components/Step.js","Components/Counter.js","App.js","serviceWorker.js","index.js"],"names":["Step","props","ref","React","createRef","data","onChange","setStepValue","value","currentStepValue","type","Counter","changeValue","setState","prevState","tmpToNextLevel","toNextLevel","state","stepValue","newState","counterValue","nextLevel","level","resetValue","setStep","reInit","toLevel","initValue","newStepValue","Number","className","this","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uTAsBeA,G,YAnBF,SAACC,GACZ,IAAIC,EAAMC,IAAMC,YAMhB,OACE,2BACEF,IAAK,SAACG,GACJH,EAAMG,GAERC,SATe,WACjBL,EAAMM,aAAaL,EAAIM,QASrBA,MAAOP,EAAMQ,iBACbC,KAAK,aCiGIC,E,kDA5Gb,WAAYV,GAAQ,IAAD,uBACjB,cAAMA,IAmBRW,YAAc,WACZ,EAAKC,UAAS,SAACC,GACb,IAAIC,EAAiBD,EAAUE,YAAc,EAAKC,MAAMC,UAEpDC,EAAW,CACbC,aAAcN,EAAUM,aAAeN,EAAUI,UACjDG,UAAWP,EAAUO,WAUvB,IARIN,GAAkB,GACpBI,EAASE,WAAa,EACtBF,EAASH,YAAcG,EAASE,WAAaP,EAAUM,aAAeN,EAAUI,WAChFC,EAASG,MAAQR,EAAUQ,MAAQ,GAEnCH,EAASH,YAAcD,EAGlBI,EAASE,WAAaF,EAASC,cACpCD,EAASE,WAAa,EACtBF,EAASH,YAAcG,EAASE,WAAaP,EAAUM,aAAeN,EAAUI,WAChFC,EAASG,QAEX,OAAOH,MAzCQ,EA6CnBI,WAAa,WACX,EAAKC,QAAQ,GACb,EAAKX,SAAS,CACZO,aAAc,EACdE,MAAO,EACPN,YAAa,GACbK,UAAW,MAnDI,EAuDnBI,OAAS,WAIP,IAHA,IAAIH,EAAQ,EACRI,EAAU,GAEPA,GAAW,EAAKzB,MAAM0B,WAC3BD,GAAW,EACXJ,IAGF,EAAKT,SAAS,CACZO,aAAc,EAAKnB,MAAM0B,UACzBL,MAAOA,EACPN,YAAaU,EAAU,EAAKzB,MAAM0B,UAClCN,UAAWK,KApEI,EAwEnBF,QAAU,SAACI,GACT,EAAKf,SAAS,CAAEK,UAAWW,OAAOD,MAnElC,IAHA,IAAIN,EAAQ,EACRI,EAAU,GAEPA,GAAWzB,EAAM0B,WACtBD,GAAW,EACXJ,IARe,OAWjB,EAAKL,MAAQ,CACXG,aAAc,EAAKnB,MAAM0B,UACzBL,MAAOA,EACPN,YAAaU,EAAUzB,EAAM0B,UAC7BT,UAAW,EACXG,UAAWK,GAhBI,E,qDA6EjB,OACE,yBAAKI,UAAU,WACb,2BACE,uCACA,0BAAMA,UAAU,SAASC,KAAKd,MAAMG,eAGtC,2BACE,qCACA,0BAAMU,UAAU,SAASC,KAAKd,MAAMK,QAGtC,2BACE,kDACA,0BAAMQ,UAAU,SAASC,KAAKd,MAAMD,cAGtC,yBAAKc,UAAU,kBACb,4BAAQE,QAASD,KAAKnB,aAAtB,OAAwCmB,KAAKd,MAAMC,WAEnD,4BAAQc,QAASD,KAAKR,YAAtB,SAEA,4BAAQS,QAASD,KAAKN,QAAtB,UAEA,kBAAC,EAAD,CAAMlB,aAAcwB,KAAKP,QAASf,iBAAkBsB,KAAKd,MAAMC,kB,GAtGnDe,aCYPC,MAZf,WACE,OACE,yBAAKJ,UAAU,OACb,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,aAAd,gBAEF,kBAAC,EAAD,CAASH,UAAW,IACpB,kBAAC,EAAD,CAASA,UAAW,OCANQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0ca4feee.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../Styles/Step.css\";\n\nconst Step = (props) => {\n  let ref = React.createRef();\n\n  const updateStep = () => {\n    props.setStepValue(ref.value);\n  };\n\n  return (\n    <input\n      ref={(data) => {\n        ref = data;\n      }}\n      onChange={updateStep}\n      value={props.currentStepValue}\n      type=\"number\"\n    />\n  );\n};\n\nexport default Step;\n","import React, { Component } from \"react\";\nimport \"../Styles/Counter.css\";\n\nimport Step from \"./Step\";\n\nclass Counter extends Component {\n  constructor(props) {\n    super(props);\n\n    let level = 1;\n    let toLevel = 10;\n\n    while (toLevel <= props.initValue) {\n      toLevel *= 2;\n      level++;\n    }\n\n    this.state = {\n      counterValue: this.props.initValue,\n      level: level,\n      toNextLevel: toLevel - props.initValue,\n      stepValue: 1,\n      nextLevel: toLevel,\n    };\n  }\n\n  changeValue = () => {\n    this.setState((prevState) => {\n      let tmpToNextLevel = prevState.toNextLevel - this.state.stepValue;\n\n      let newState = {\n        counterValue: prevState.counterValue + prevState.stepValue,\n        nextLevel: prevState.nextLevel,\n      };\n      if (tmpToNextLevel <= 0) {\n        newState.nextLevel *= 2;\n        newState.toNextLevel = newState.nextLevel - (prevState.counterValue + prevState.stepValue);\n        newState.level = prevState.level + 1;\n      } else {\n        newState.toNextLevel = tmpToNextLevel;\n      }\n\n      while (newState.nextLevel <= newState.counterValue) {\n        newState.nextLevel *= 2;\n        newState.toNextLevel = newState.nextLevel - (prevState.counterValue + prevState.stepValue);\n        newState.level++;\n      }\n      return newState;\n    });\n  };\n\n  resetValue = () => {\n    this.setStep(1);\n    this.setState({\n      counterValue: 0,\n      level: 1,\n      toNextLevel: 10,\n      nextLevel: 10,\n    });\n  };\n\n  reInit = () => {\n    let level = 1;\n    let toLevel = 10;\n\n    while (toLevel <= this.props.initValue) {\n      toLevel *= 2;\n      level++;\n    }\n\n    this.setState({\n      counterValue: this.props.initValue,\n      level: level,\n      toNextLevel: toLevel - this.props.initValue,\n      nextLevel: toLevel,\n    });\n  };\n\n  setStep = (newStepValue) => {\n    this.setState({ stepValue: Number(newStepValue) });\n  };\n\n  render() {\n    return (\n      <div className=\"counter\">\n        <p>\n          <i>Counter:</i>\n          <span className=\"value\">{this.state.counterValue}</span>\n        </p>\n\n        <p>\n          <i>Level:</i>\n          <span className=\"level\">{this.state.level}</span>\n        </p>\n\n        <p>\n          <i>Left to next level:</i>\n          <span className=\"level\">{this.state.toNextLevel}</span>\n        </p>\n\n        <div className=\"buttons-pannel\">\n          <button onClick={this.changeValue}>Add {this.state.stepValue}</button>\n\n          <button onClick={this.resetValue}>Reset</button>\n\n          <button onClick={this.reInit}>ReInit</button>\n\n          <Step setStepValue={this.setStep} currentStepValue={this.state.stepValue} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Counter;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Counter from \"./Components/Counter\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"App-title\">Counter app</h1>\n      </header>\n      <Counter initValue={0} />\n      <Counter initValue={22} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}