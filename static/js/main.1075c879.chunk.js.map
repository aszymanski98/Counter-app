{"version":3,"sources":["Components/Step.js","Components/Counter.js","App.js","serviceWorker.js","index.js"],"names":["Step","props","ref","React","createRef","data","onChange","setStepValue","value","currentStepValue","type","Counter","changeValue","setState","prevState","tmpToNextLevel","toNextLevel","state","stepValue","newState","counterValue","nextLevel","level","resetValue","setStep","reInit","toLevel","initValue","newStepValue","Number","className","this","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uTAsBeA,G,YAnBF,SAACC,GACZ,IAAIC,EAAMC,IAAMC,YAMhB,OACE,2BACEF,IAAK,SAACG,GACJH,EAAMG,GAERC,SATe,WACjBL,EAAMM,aAAaL,EAAIM,QASrBA,MAAOP,EAAMQ,iBACbC,KAAK,aCiGIC,E,kDA5Gb,WAAYV,GAAQ,IAAD,uBACjB,cAAMA,IAmBRW,YAAc,WACZ,EAAKC,UAAS,SAACC,GACb,IAAIC,EAAiBD,EAAUE,YAAc,EAAKC,MAAMC,UAEpDC,EAAW,CACbC,aAAcN,EAAUM,aAAeN,EAAUI,UACjDG,UAAWP,EAAUO,WAUvB,IARIN,GAAkB,GACpBI,EAASE,WAAa,EACtBF,EAASH,YAAcG,EAASE,WAAaP,EAAUM,aAAeN,EAAUI,WAChFC,EAASG,MAAQR,EAAUQ,MAAQ,GAEnCH,EAASH,YAAcD,EAGlBI,EAASE,WAAaF,EAASC,cACpCD,EAASE,WAAa,EACtBF,EAASH,YAAcG,EAASE,WAAaP,EAAUM,aAAeN,EAAUI,WAChFC,EAASG,QAEX,OAAOH,MAzCQ,EA6CnBI,WAAa,WACX,EAAKC,QAAQ,GACb,EAAKX,SAAS,CACZO,aAAc,EACdE,MAAO,EACPN,YAAa,GACbK,UAAW,MAnDI,EAuDnBI,OAAS,WAIP,IAHA,IAAIH,EAAQ,EACRI,EAAU,GAEPA,GAAW,EAAKzB,MAAM0B,WAC3BD,GAAW,EACXJ,IAGF,EAAKT,SAAS,CACZO,aAAc,EAAKnB,MAAM0B,UACzBL,MAAOA,EACPN,YAAaU,EAAU,EAAKzB,MAAM0B,UAClCN,UAAWK,KApEI,EAwEnBF,QAAU,SAACI,GACT,EAAKf,SAAS,CAAEK,UAAWW,OAAOD,MAnElC,IAHA,IAAIN,EAAQ,EACRI,EAAU,GAEPA,GAAWzB,EAAM0B,WACtBD,GAAW,EACXJ,IARe,OAWjB,EAAKL,MAAQ,CACXG,aAAc,EAAKnB,MAAM0B,UACzBL,MAAOA,EACPN,YAAaU,EAAUzB,EAAM0B,UAC7BT,UAAW,EACXG,UAAWK,GAhBI,E,qDA6EjB,OACE,yBAAKI,UAAU,WACb,2BACE,uCACA,0BAAMA,UAAU,SAASC,KAAKd,MAAMG,eAGtC,2BACE,qCACA,0BAAMU,UAAU,SAASC,KAAKd,MAAMK,QAGtC,2BACE,kDACA,0BAAMQ,UAAU,SAASC,KAAKd,MAAMD,cAGtC,yBAAKc,UAAU,kBACb,4BAAQE,QAASD,KAAKnB,aAAtB,OAAwCmB,KAAKd,MAAMC,WAEnD,4BAAQc,QAASD,KAAKR,YAAtB,SAEA,4BAAQS,QAASD,KAAKN,QAAtB,UAEA,kBAAC,EAAD,CAAMlB,aAAcwB,KAAKP,QAASf,iBAAkBsB,KAAKd,MAAMC,kB,GAtGnDe,aCYPC,MAZf,WACE,OACE,yBAAKJ,UAAU,OACb,4BAAQA,UAAU,cAChB,wBAAIA,UAAU,aAAd,gBAEF,kBAAC,EAAD,CAASH,UAAW,IACpB,kBAAC,EAAD,CAASA,UAAW,OCANQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1075c879.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../Styles/Step.css\";\r\n\r\nconst Step = (props) => {\r\n  let ref = React.createRef();\r\n\r\n  const updateStep = () => {\r\n    props.setStepValue(ref.value);\r\n  };\r\n\r\n  return (\r\n    <input\r\n      ref={(data) => {\r\n        ref = data;\r\n      }}\r\n      onChange={updateStep}\r\n      value={props.currentStepValue}\r\n      type=\"number\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default Step;\r\n","import React, { Component } from \"react\";\r\nimport \"../Styles/Counter.css\";\r\n\r\nimport Step from \"./Step\";\r\n\r\nclass Counter extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let level = 1;\r\n    let toLevel = 10;\r\n\r\n    while (toLevel <= props.initValue) {\r\n      toLevel *= 2;\r\n      level++;\r\n    }\r\n\r\n    this.state = {\r\n      counterValue: this.props.initValue,\r\n      level: level,\r\n      toNextLevel: toLevel - props.initValue,\r\n      stepValue: 1,\r\n      nextLevel: toLevel,\r\n    };\r\n  }\r\n\r\n  changeValue = () => {\r\n    this.setState((prevState) => {\r\n      let tmpToNextLevel = prevState.toNextLevel - this.state.stepValue;\r\n\r\n      let newState = {\r\n        counterValue: prevState.counterValue + prevState.stepValue,\r\n        nextLevel: prevState.nextLevel,\r\n      };\r\n      if (tmpToNextLevel <= 0) {\r\n        newState.nextLevel *= 2;\r\n        newState.toNextLevel = newState.nextLevel - (prevState.counterValue + prevState.stepValue);\r\n        newState.level = prevState.level + 1;\r\n      } else {\r\n        newState.toNextLevel = tmpToNextLevel;\r\n      }\r\n\r\n      while (newState.nextLevel <= newState.counterValue) {\r\n        newState.nextLevel *= 2;\r\n        newState.toNextLevel = newState.nextLevel - (prevState.counterValue + prevState.stepValue);\r\n        newState.level++;\r\n      }\r\n      return newState;\r\n    });\r\n  };\r\n\r\n  resetValue = () => {\r\n    this.setStep(0);\r\n    this.setState({\r\n      counterValue: 0,\r\n      level: 1,\r\n      toNextLevel: 10,\r\n      nextLevel: 10,\r\n    });\r\n  };\r\n\r\n  reInit = () => {\r\n    let level = 1;\r\n    let toLevel = 10;\r\n\r\n    while (toLevel <= this.props.initValue) {\r\n      toLevel *= 2;\r\n      level++;\r\n    }\r\n\r\n    this.setState({\r\n      counterValue: this.props.initValue,\r\n      level: level,\r\n      toNextLevel: toLevel - this.props.initValue,\r\n      nextLevel: toLevel,\r\n    });\r\n  };\r\n\r\n  setStep = (newStepValue) => {\r\n    this.setState({ stepValue: Number(newStepValue) });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"counter\">\r\n        <p>\r\n          <i>Counter:</i>\r\n          <span className=\"value\">{this.state.counterValue}</span>\r\n        </p>\r\n\r\n        <p>\r\n          <i>Level:</i>\r\n          <span className=\"level\">{this.state.level}</span>\r\n        </p>\r\n\r\n        <p>\r\n          <i>Left to next level:</i>\r\n          <span className=\"level\">{this.state.toNextLevel}</span>\r\n        </p>\r\n\r\n        <div className=\"buttons-pannel\">\r\n          <button onClick={this.changeValue}>Add {this.state.stepValue}</button>\r\n\r\n          <button onClick={this.resetValue}>Reset</button>\r\n\r\n          <button onClick={this.reInit}>ReInit</button>\r\n\r\n          <Step setStepValue={this.setStep} currentStepValue={this.state.stepValue} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport Counter from \"./Components/Counter\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1 className=\"App-title\">Counter app</h1>\r\n      </header>\r\n      <Counter initValue={0} />\r\n      <Counter initValue={22} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}